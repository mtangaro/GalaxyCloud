tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/custom_types.yaml

description: >
  TOSCA test for launching a Virtual Elastic Cluster. It will launch
  a single front-end that will be in change of managing the elasticity
  using the specified LRMS (torque, sge, slurm and condor) workload.

topology_template:
  inputs:
    wn_num_max:
      type: integer
      description: Maximum number of WNs in the elastic cluster
      default: 5
      required: yes
    wn_num_min:
      type: integer
      description: Minimum number of WNs in the elastic cluster
      default: 0
      required: yes
    fe_instance_flavor:
      type: string
      description: front end flavor (num_cpu, memory, disk)
      default: small
    wn_instance_flavor:
      type: string
      description: worker nodes flavor (num_cpu, memory, disk)
      default: small
    storage_size:
      type: string
      description: storage memory required for the instance
      default: 10 GB
    hybrid:
      type: boolean
      description: Flag to specify that this cluster will work in an hybrid environment
      default: false
      required: false

    galaxy_storage_type:
      type: string
      description: Storage type (Iaas Block Storage, Onedata, Filesystem encryption)
      default: "IaaS"
    userdata_provider:
      type: string
      description: default OneProvider
      default: "not_a_privder_url"
    userdata_token:
      type: string
      description: Access token for onedata space
      default: "not_a_token"
    userdata_space:
      type: string
      description: Onedata space
      default: "galaxy"

    admin_email:
      type: string
      description: email of the admin user
      default: admin@admin.com
    admin_api_key:
      type: string
      description: key to access the API with admin role
      default: not_very_secret_api_key
    version:
      type: string
      description: galaxy version to install
      default: master
    instance_description:
      type: string
      description: galaxy instance description
      default: INDIGO Galaxy test
    instance_key_pub:
      type: string
      description: galaxy instance ssh public key
      default: your_ssh_public_key
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export

    flavor:
      type: string
      description: Galaxy flavor for tools installation
      default: "galaxy-no-tools"

    reference_data:
      type: boolean
      description: Install Reference data
      default: true
    refdata_dir:
      type: string
      description: path to store galaxy reference data
      default: /refdata
    refdata_repository_name:
      type: string
      description: Onedata space name, CernVM-FS repository name or subdirectory downaload name
      default: 'elixir-italy.galaxy.refdata'
    refdata_provider_type:
      type: string
      description: Select Reference data provider type (Onedata, CernVM-FS or download)
      default: 'cvmfs'
    refdata_provider:
      type: string
      description: Oneprovider for reference data
      default: 'not_a_provider'
    refdata_token:
      type: string
      description: Access token for reference data
      default: 'not_a_token'
    refdata_cvmfs_server_url:
      type: string
      description: CernVM-FS server, replica or stratum-zero
      default: '90.147.102.186'
    refdata_cvmfs_repository_name:
      type: string
      description: Reference data CernVM-FS repository name
      default: 'elixir-italy.galaxy.refdata'
    refdata_cvmfs_key_file:
      type: string
      description: CernVM-FS public key
      default: 'elixir-italy.galaxy.refdata.pub'
    refdata_cvmfs_proxy_url:
      type: string
      description: CernVM-FS proxy url
      default: 'DIRECT'
    refdata_cvmfs_proxy_port:
      type: integer
      description: CernVM-FS proxy port
      default: 80


  node_templates:

    elastic_cluster_front_end:
      type: tosca.nodes.indigo.ElasticCluster
      properties:
        deployment_id: orchestrator_deployment_id
        iam_access_token: iam_access_token
        iam_clues_client_id: iam_clues_client_id
        iam_clues_client_secret: iam_clues_client_secret
        hybrid: { get_input: hybrid }
      requirements:
        - lrms: lrms_front_end
        - wn: wn_node

    galaxy_portal:
      type: tosca.nodes.indigo.GalaxyPortalAndStorage
      properties:
        os_storage: { get_input: galaxy_storage_type }
        token: { get_input: userdata_token }
        provider: { get_input: userdata_provider }
        space: { get_input: userdata_space }
        admin_email: { get_input: admin_email }
        admin_api_key: { get_input: admin_api_key }
        version: { get_input: version }
        instance_description: { get_input: instance_description }
        instance_key_pub: { get_input: instance_key_pub }
        export_dir: { get_input: export_dir }
      requirements:
        - lrms: lrms_front_end

    galaxy_tools:
      type: tosca.nodes.indigo.GalaxyShedTool
      properties:
        flavor: { get_input: flavor }
        admin_api_key: { get_input: admin_api_key }
        version: { get_input: version }
      requirements:
        - host: galaxy_portal

    galaxy_refdata:
      type: tosca.nodes.indigo.GalaxyReferenceData
      properties:
        reference_data: { get_input: reference_data }
        refdata_dir: { get_input: refdata_dir }
        flavor: { get_input: flavor }
        refdata_repository_name: { get_input: refdata_repository_name }
        refdata_provider_type: { get_input: refdata_provider_type }
        refdata_provider: { get_input: refdata_provider }
        refdata_token: { get_input: refdata_token }
        refdata_cvmfs_server_url: { get_input: refdata_cvmfs_server_url }
        refdata_cvmfs_repository_name: { get_input: refdata_cvmfs_repository_name }
        refdata_cvmfs_key_file: { get_input: refdata_cvmfs_key_file }
        refdata_cvmfs_proxy_url: { get_input: refdata_cvmfs_proxy_url }
        refdata_cvmfs_proxy_port: { get_input: refdata_cvmfs_proxy_port }
      requirements:
        - host: galaxy_portal
        - dependency: galaxy_tools

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Slurm
      properties:
        wn_ips: { get_attribute: [ lrms_wn, private_address ] }
        hybrid: { get_input: hybrid }
      requirements:
        - host: lrms_server

    lrms_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: slurmserver
            network_name: PUBLIC
            ports:
              http_port:
                protocol: tcp
                source: 80
              ftp_port:
                protocol: tcp
                source: 21
        host:
          properties:
            instance_type: { get_input: fe_instance_flavor }
        os:
          properties:
            #image: centos-7-1708-galaxy-slurm
            image: centos-7-1708-galaxy-base
            #image: centos-7-1708-vmi
            #image: ubuntu-16.04-vmi
      requirements:
        # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Slurm
      properties:
        front_end_ip: { get_attribute: [ lrms_server, private_address, 0 ] }
        public_front_end_ip: { get_attribute: [ lrms_server, public_address, 0 ] }
        hybrid: { get_input: hybrid }
      capabilities:
        wn:
          properties:
            max_instances: { get_input: wn_num_max }
            min_instances: { get_input: wn_num_min }
      requirements:
        - host: lrms_wn

    galaxy_wn:
      type: tosca.nodes.indigo.GalaxyWnCvmfsReferenceData
      properties:
        export_dir: { get_input: export_dir }
        front_end_ip: { get_attribute: [ lrms_server, private_address, 0 ] }
        flavor: { get_input: flavor }
        version: { get_input: version }
        reference_data: { get_input: reference_data }
        refdata_cvmfs_server_url: { get_input: refdata_cvmfs_server_url }
        refdata_cvmfs_repository_name: { get_input: refdata_cvmfs_repository_name }
        refdata_cvmfs_key_file: { get_input: refdata_cvmfs_key_file }
        refdata_cvmfs_proxy_url: { get_input: refdata_cvmfs_proxy_url }
        refdata_cvmfs_proxy_port: { get_input: refdata_cvmfs_proxy_port }
        refdata_dir: { get_input: refdata_dir }
      requirements:
        - host: lrms_wn

    lrms_wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: wn_num_min }
        host:
          properties:
            instance_type: { get_input: wn_instance_flavor }
        os:
          properties:
            #image: centos-7-1708-galaxy-slurm
            image: centos-7-1708-galaxy-base
            #image: centos-7-1708-vmi
            #image: ubuntu-16.04-vmi

  outputs:
    galaxy_url:
      value: { concat: [ 'http://', get_attribute: [ lrms_server, public_address, 0 ], '/galaxy' ] }
    cluster_ip:
      value: { get_attribute: [ lrms_server, public_address, 0 ] }
    cluster_creds:
      value: { get_attribute: [ lrms_server, endpoint, credential, 0 ] }
